- name: Include vault_fetcher role
  include_role:
    name: vault-fetcher
  vars:
    fetcher_secret_var_name: "mongo_admin"
    fetcher_secret_path: "{{ mongo_admin_secret_path }}"
    fetcher_vault_token: "{{ vault_token }}"
    fetcher_vault_url: "{{ vault_url }}"
    fetcher_ca_path: "{{ ca_path }}"
    fetcher_engine_version: 2

- name: Get current primary host
  shell: |
    {{ mongo_base_dir }}/bin/mongosh "mongodb://admin:{{ mongo_admin.password }}@localhost:{{ shard_port }}/admin?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/mongodb.pem&directConnection=true" --quiet --eval '
      const status = rs.status();
      print(status.members.find(m => m.stateStr === "PRIMARY").name);
    '
  register: current_primary_result
  run_once: true

- name: Set current primary as a fact
  set_fact:
    current_primary: "{{ current_primary_result.stdout.strip() }}"

- name: Remove all shard servers that are not the primary
  shell: |
    {{ mongo_base_dir }}/bin/mongosh "mongodb://admin:{{ mongo_admin.password }}@localhost:{{ shard_port }}/admin?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/mongodb.pem&directConnection=true" --eval '
    {% for host in groups["remove_shard_servers"] %}
    if ("{{ hostvars[host].ansible_host }}:{{ shard_port }}" !== "{{ current_primary }}") {
      print("Removing: {{ hostvars[host].ansible_host }}:{{ shard_port }}");
      rs.remove("{{ hostvars[host].ansible_host }}:{{ shard_port }}");
      sleep(1000);
    } else {
      print("Skipping primary: {{ hostvars[host].ansible_host }}:{{ shard_port }}");
    }
    {% endfor %}
    '
  run_once: true

- name: Step down current primary if it's in the remove list
  shell: |
    {{ mongo_base_dir }}/bin/mongosh "mongodb://admin:{{ mongo_admin.password }}@localhost:{{ shard_port }}/admin?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/mongodb.pem&directConnection=true" --eval '
    try {
      rs.stepDown(60, 60);
    } catch (e) {
      print("Step down failed: " + e.message);
    }
    '
  when: current_primary in groups["remove_shard_servers"] | map('extract', hostvars, 'ansible_host') | map('regex_replace', '$', ':' ~ shard_port) | list
  run_once: true

- name: Wait for new primary to be elected
  shell: |
    sleep 2
    {{ mongo_base_dir }}/bin/mongosh "mongodb://admin:{{ mongo_admin.password }}@localhost:{{ shard_port }}/admin?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/mongodb.pem&directConnection=true" --quiet --eval 'print(rs.isMaster().primary)'
  when: current_primary in groups["remove_shard_servers"] | map('extract', hostvars, 'ansible_host') | map('regex_replace', '$', ':' ~ shard_port) | list
  register: new_primary_result
  run_once: true

- name: Remove old primary from new primary
  shell: |
    {{ mongo_base_dir }}/bin/mongosh "mongodb://admin:{{ mongo_admin.password }}@{{ new_primary_result.stdout | trim }}/admin?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ vault_dir }}/authorities/ca.pem&tlsCertificateKeyFile={{ vault_dir }}/secrets/mongo/mongodb.pem" --eval '
    rs.remove("{{ current_primary }}");
    '
  when:
    - current_primary in groups["remove_shard_servers"] | map('extract', hostvars, 'ansible_host') | map('regex_replace', '$', ':' ~ shard_port) | list
    - new_primary_result.stdout | trim != ''
  run_once: true
