- name: Create empty vault-agent.pid file
  file:
    path: "{{ vault_dir }}/agents/mongos/vault-agent.pid"
    state: touch
    owner: "{{ mongo_vault_agent_user }}"
    group: "{{ mongo_vault_agent_group }}"
    mode: "0640"
  become: true

- name: Create vault policies
  block:
    - name: "Render Vault policy for mongos-approle-reader"
      template:
        src: "{{ playbook_dir }}/../vault/policies/mongos-approle-reader.hcl.j2"
        dest: "/tmp/mongos-approle-reader-{{ hostvars[inventory_hostname]['ansible_host'] }}.hcl"

    - name: "Read rendered mongos-approle-reader policy file"
      slurp:
        src: "/tmp/mongos-approle-reader-{{ hostvars[inventory_hostname]['ansible_host'] }}.hcl"
      register: slurped_mongos_approle_reader_policy

    - name: "Upload mongos-approle-reader policy to vault"
      delegate_to: localhost
      community.hashi_vault.vault_write:
        url: "{{ vault_url }}"
        token: "{{ vault_token }}"
        path: "sys/policies/acl/mongos-approle-reader-{{ hostvars[inventory_hostname]['ansible_host'] }}"
        ca_cert: "{{ local_ca_path }}"
        data:
          policy: "{{ slurped_mongos_approle_reader_policy.content | b64decode }}"

    - name: "Render Vault policy for mongos"
      template:
        src: "{{ playbook_dir }}/../vault/policies/mongos.hcl.j2"
        dest: "/tmp/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.hcl"

    - name: "Read rendered mongos policy file"
      slurp:
        src: "/tmp/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.hcl"
      register: slurped_mongos_policy

    - name: "Upload mongos policy to vault"
      delegate_to: localhost
      community.hashi_vault.vault_write:
        url: "{{ vault_url }}"
        token: "{{ vault_token }}"
        path: "sys/policies/acl/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}"
        ca_cert: "{{ local_ca_path }}"
        data:
          policy: "{{ slurped_mongos_policy.content | b64decode }}"

  always:
    - name: "Clean up temporary policy file"
      file:
        path: "/tmp/mongos-approle-reader-{{ hostvars[inventory_hostname]['ansible_host'] }}.hcl"
        state: absent

    - name: "Clean up temporary policy file"
      file:
        path: "/tmp/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.hcl"
        state: absent

- name: "Create AppRole for node"
  delegate_to: localhost
  community.hashi_vault.vault_write:
    url: "{{ vault_url }}"
    token: "{{ vault_token }}"
    path: "auth/approle/role/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}"
    ca_cert: "{{ local_ca_path }}"
    data:
      token_policies: "mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}"
      token_ttl: "1h"
      token_max_ttl: "4h"

- name: Copy Vault Agent config
  template:
    src: "{{ playbook_dir }}/../vault/agents/mongos-agent-config.hcl.j2"
    dest: "{{ vault_dir }}/agents/mongos/mongos-agent-config.hcl"
    owner: "{{ mongo_vault_agent_user }}"
    group: "{{ mongo_vault_agent_group }}"
    mode: "0400"

- name: Deploy rendered Vault Agent mongodb.pem.ctmpl template
  template:
    src: "{{ playbook_dir }}/../vault/templates/mongos.pem.ctmpl.j2"
    dest: "{{ vault_dir }}/templates/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.pem.ctmpl"
    owner: "{{ mongo_vault_agent_user }}"
    group: "{{ mongo_vault_agent_group }}"
    mode: "0400"

- name: Install mongosApproleVR.conf
  template:
    src: mongosApproleVR.conf.j2
    dest: "{{ mongo_base_dir }}/conf/mongosApproleVR.conf"
    owner: "{{ mongo_vault_agent_user }}"
    group: "{{ mongo_vault_agent_group }}"
    mode: "0440"

- name: Install fetch-vault-mongos-approle-ids script
  template:
    src: fetch-vault-mongos-approle-ids.sh.j2
    dest: "{{ vault_dir }}/scripts/mongos/fetch-vault-mongos-approle-ids.sh"
    owner: "{{ mongo_vault_agent_user }}"
    group: "{{ mongo_vault_agent_group }}"
    mode: "0550"

- name: Create systemd unit to run the fetcher on boot
  copy:
    dest: /etc/systemd/system/fetch-vault-mongos-approle-ids.service
    content: |
      [Unit]
      Description=Vault Mongos approle ids fetcher
      After=network-online.target
      Wants=network-online.target

      [Service]
      User=root
      Group={{ vault_agent_bin_group }}
      Type=oneshot
      ExecStart={{ vault_dir }}/scripts/mongos/fetch-vault-mongos-approle-ids.sh
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
  notify: Reload systemd

- name: Install restart-mongos-services script
  template:
    src: mongos-vault-restart.sh.j2
    dest: "{{ vault_dir }}/scripts/mongos/mongos-vault-restart.sh"
    owner: "{{ mongo_vault_agent_user }}"
    group: "{{ mongo_vault_agent_group }}"
    mode: "0550"

- name: Create systemd service file for mongos vault agent
  copy:
    dest: /etc/systemd/system/mongos-vault-agent.service
    content: |
      [Unit]
      Description=Vault Agent
      After=network.target fetch-vault-mongos-approle-ids.service
      Requires=fetch-vault-mongos-approle-ids.service

      [Service]
      User={{ mongo_vault_agent_user }}
      Group={{ mongo_vault_agent_group }}
      ExecStart={{ vault_dir }}/bin/vault agent -config={{ vault_dir }}/agents/mongos/mongos-agent-config.hcl
      Restart=on-failure
      PIDFile={{ vault_dir }}/agents/mongos/mongos-vault-agent.pid

      [Install]
      WantedBy=multi-user.target
  notify: Reload systemd

- name: Force Reload systemd
  systemd:
    daemon_reload: yes

- name: Enable & start fetcher
  systemd:
    name: fetch-vault-mongos-approle-ids.service
    state: started
    enabled: yes
  register: fetcher_status

- name: Start and enable Mongos Vault Agent service
  systemd:
    name: mongos-vault-agent
    state: started
    enabled: yes
