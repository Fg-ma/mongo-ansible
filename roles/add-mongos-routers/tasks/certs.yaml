- name: Install mongos.cnf
  template:
    src: mongos.cnf.j2
    dest: "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.cnf"
    owner: "{{ mongo_vault_agent_user }}"
    group: "{{ mongo_vault_agent_group }}"
    mode: "0640"

- name: Generate mongos private key
  command: >
    openssl genrsa -out {{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.key 4096
  args:
    creates: "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.key"
  become: true

- name: Generate mongos CSR
  command: >
    openssl req -new 
    -key {{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.key
    -out {{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.csr
    -config {{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.cnf
  args:
    creates: "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.csr"
  become: true

- name: Include vault_fetcher role
  include_role:
    name: vault-fetcher
  vars:
    fetcher_secret_var_name: "ca_key_dict"
    fetcher_secret_path: "{{ ca_key_secret_path }}"
    fetcher_vault_token: "{{ vault_token }}"
    fetcher_vault_url: "{{ vault_url }}"
    fetcher_ca_path: "{{ local_ca_path }}"
    fetcher_engine_version: 2

- name: Write CA key to a secure temporary file
  tempfile:
    state: file
    suffix: ".key"
  register: temp_ca_key

- name: Set permissions on temporary CA key file
  file:
    path: "{{ temp_ca_key.path }}"
    mode: "0600"

- name: Write the CA key content to temp file
  copy:
    content: "{{ ca_key_dict.value }}"
    dest: "{{ temp_ca_key.path }}"
    mode: "0600"
  no_log: true

- name: Sign mongos CSR to create mongos certificate
  command: >
    openssl x509 -req
    -in {{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.csr
    -CA {{ vault_dir }}/authorities/ca.pem
    -CAkey {{ temp_ca_key.path }}
    -CAcreateserial
    -out {{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.crt
    -days 365
    -sha256
    -extfile {{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.cnf
    -extensions req_ext
  args:
    creates: "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.crt"
  become: true

- name: Concatenate and strip whitespace
  shell: |
    awk 'NF' \
      "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.crt" \
      "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.key" \
      > "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.pem"
  args:
    creates: "{{ vault_dir }}/secrets/mongos/mongos-{{ hostvars[inventory_hostname]['ansible_host'] }}.pem"
  become: true

- name: Delete temporary CA key file
  file:
    path: "{{ temp_ca_key.path }}"
    state: absent
  no_log: true

- name: Upload Mongos TLS artifacts for this host to Vault (separate secrets, API, no CLI)
  vars:
    ip: "{{ hostvars[inventory_hostname].ansible_host }}"
    mongos_prefix: "{{ vault_dir }}/secrets/mongos/mongos-{{ ip }}"
    mongos_files:
      - { suffix: cnf, path: "{{ mongos_prefix }}.cnf" }
      - { suffix: csr, path: "{{ mongos_prefix }}.csr" }
      - { suffix: key, path: "{{ mongos_prefix }}.key" }
      - { suffix: crt, path: "{{ mongos_prefix }}.crt" }
      - { suffix: pem, path: "{{ mongos_prefix }}.pem" }
  block:
    - name: Stat Mongos TLS artifacts
      become: true
      ansible.builtin.stat:
        path: "{{ item.path }}"
      loop: "{{ mongos_files }}"
      register: mongos_artifact_stats
      loop_control:
        label: "{{ item.suffix }}"
      no_log: true

    - name: Fail if any artifact missing
      ansible.builtin.fail:
        msg: >-
          Missing Mongos artifact(s):
          {{ (mongos_artifact_stats.results
               | rejectattr('stat.exists','bool')
               | map(attribute='item.path')
               | list) | join(', ') }}
      when: not (mongos_artifact_stats.results | map(attribute='stat.exists') | min)
      # no_log: true

    - name: Slurp Mongos TLS artifacts (read from remote host)
      become: true
      ansible.builtin.slurp:
        src: "{{ item.path }}"
      loop: "{{ mongos_files }}"
      register: mongos_slurped
      loop_control:
        label: "{{ item.suffix }}"
      no_log: true

    - name: Upload each artifact to Vault (API call)
      community.hashi_vault.vault_kv2_write:
        url: "{{ vault_url }}"
        token: "{{ vault_token }}"
        ca_cert: "{{ local_ca_path }}"
        mount_point: secret
        path: "mongos/{{ ip }}/{{ item.item.suffix }}"
        data:
          content: "{{ item.content | b64decode | trim }}"
      loop: "{{ mongos_slurped.results }}"
      loop_control:
        label: "{{ item.item.suffix }}"
      delegate_to: localhost
      run_once: false
      register: vault_write_each
      no_log: true

  rescue:
    - name: Upload failed â€” local files retained
      ansible.builtin.debug:
        msg: "Vault upload FAILED for {{ inventory_hostname }}; artifacts NOT deleted."

  always:
    - name: Define mongos_artifact_paths
      set_fact:
        mongos_artifact_paths: "{{ mongos_files | map(attribute='path') | list }}"

    - name: Attempt secure wipe (if shred available)
      become: true
      ansible.builtin.shell: |
        if command -v shred >/dev/null 2>&1 && [ -f {{ item | quote }} ]; then
          shred --force --zero --remove {{ item | quote }} || true
        fi
      loop: "{{ mongos_artifact_paths }}"
      args:
        executable: /bin/bash
      changed_when: false
      no_log: true

    - name: Ensure artifact file absent
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ mongos_artifact_paths }}"
      no_log: true
