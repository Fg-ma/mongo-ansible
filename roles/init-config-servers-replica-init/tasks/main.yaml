- name: Wait for all config-server members to be reachable
  wait_for:
    host: "{{ hostvars[item].ansible_host }}"
    port: "{{ config_port }}"
    timeout: 120
    delay: 5
    state: started
  loop: "{{ groups['config_servers'] }}"

- name: Include vault_fetcher role
  include_role:
    name: vault-fetcher
  vars:
    fetcher_secret_var_name: "mongo_admin"
    fetcher_secret_path: "{{ mongo_admin_secret_path }}"
    fetcher_vault_token: "{{ vault_token }}"
    fetcher_vault_url: "{{ vault_url }}"
    fetcher_ca_path: "{{ ca_path }}"
    fetcher_engine_version: 2

- name: Initiate replica set
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_node }}:{{ config_port }}/?tls=true&tlsCAFile={{ mongo_base_dir }}/certs/ca.pem&tlsCertificateKeyFile={{ mongo_base_dir }}/certs/secrets/mongodb.pem&directConnection=true"
    --eval 'rs.initiate({ _id: "{{ repl_set_name }}", configsvr: true, members: [ { _id: 0, host: "{{ primary_node }}:{{ config_port }}" } ] })'
  run_once: true
  register: rs_initiate_result
  failed_when: rs_initiate_result.rc != 0 and '"already initialized"' not in rs_initiate_result.stderr
  become: true

- name: Wait for primary election
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_node }}:{{ config_port }}/?tls=true&tlsCAFile={{ mongo_base_dir }}/certs/ca.pem&tlsCertificateKeyFile={{ mongo_base_dir }}/certs/secrets/mongodb.pem&directConnection=true"
    --quiet --eval 'while(rs.status().myState != 1) { sleep(1000); }'
  run_once: true
  become: true

- name: Add other members to the replica set
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_node }}:{{ config_port }}/?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ mongo_base_dir }}/certs/ca.pem&tlsCertificateKeyFile={{ mongo_base_dir }}/certs/secrets/mongodb.pem&directConnection=true"
    --eval 'rs.add({ _id: {{ server_id }}, host: "{{ server }}:{{ config_port }}" })'
  loop: "{{ groups['config_servers'] | map('extract', hostvars, 'ansible_host') | list }}"
  loop_control:
    index_var: idx
    loop_var: server
  when: server != primary_node
  vars:
    server_id: "{{ idx + 1 }}"
  run_once: true
  become: true
  delegate_to: "{{ primary_node }}"

- name: Disable Mongo telemetry
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_node }}:{{ config_port }}/?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ mongo_base_dir }}/certs/ca.pem&tlsCertificateKeyFile={{ mongo_base_dir }}/certs/secrets/mongodb.pem&directConnection=true"
    --eval 'disableTelemetry()'
  run_once: true
  become: true

- name: Create admin user
  shell: >
    {{ mongo_base_dir }}/bin/mongosh "mongodb://{{ primary_node }}:{{ config_port }}/?replicaSet={{ repl_set_name }}&tls=true&tlsCAFile={{ mongo_base_dir }}/certs/ca.pem&tlsCertificateKeyFile={{ mongo_base_dir }}/certs/secrets/mongodb.pem&directConnection=true"
    --eval 'db.getSiblingDB("admin").createUser({ user: "admin", pwd: "{{ mongo_admin.password }}", roles: [ { role: "root", db: "admin" } ] })'
  run_once: true
  become: true
